// Generated by CoffeeScript 1.10.0
var cozydb;

cozydb = require('cozydb');

if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    var i, length, list, thisArg, value;
    if (this === null) {
      throw new TypeError("Find call on null or undefined.");
    }
    if ((typeof predicate) !== "function") {
      throw new TypeError("Predicate must be a function.");
    }
    list = Object(this);
    length = list.length >>> 0;
    thisArg = arguments[1];
    i = 0;
    value = list[i];
    while (value) {
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
      value = list[++i];
    }
    return void 0;
  };
}

module.exports.sendShareInvitations = function(event, callback) {
  var data, guests, hasGuestToShare, needSaving;
  guests = event.toJSON().attendees;
  needSaving = false;
  hasGuestToShare = guests.find(function(guest) {
    return guest.isSharedWithCozy && (guest.status === 'INVITATION-NOT-SENT');
  });
  if (!hasGuestToShare) {
    return callback();
  }
  data = {
    desc: event.description,
    rules: [
      {
        id: event.id,
        docType: 'event'
      }
    ],
    targets: [],
    continuous: true
  };
  guests.forEach(function(guest) {
    if ((guest.status === 'INVITATION-NOT-SENT') && guest.isSharedWithCozy) {
      data.targets.push({
        recipientUrl: guest.cozy
      });
      guest.status = "NEEDS-ACTION";
      return needSaving = true;
    }
  });
  return cozydb.api.createSharing(data, function(err, body) {
    if (err != null) {
      return callback(err);
    } else if (!needSaving) {
      return callback();
    } else {
      return event.updateAttributes({
        attendees: guests
      }, callback);
    }
  });
};
