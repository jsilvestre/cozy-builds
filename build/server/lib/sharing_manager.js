// Generated by CoffeeScript 1.10.0
var Client, NotificationsHelper, Sharing, apps, articleBeforeDocType, clientDS, createPersistentNotif, createTemporaryNotif, extractDocType, extractIds, getSharingInfos, localizationManager, log, ref;

NotificationsHelper = require('cozy-notifications-helper');

Sharing = require('../models/sharing');

Client = require("request-json").JsonClient;

localizationManager = require('../helpers/localization_manager');

log = require('printit')({
  prefix: 'sharing-manager'
});

clientDS = new Client("http://localhost:9101/");

if ((ref = process.env.NODE_ENV) === 'test' || ref === 'production') {
  clientDS.setBasicAuth(process.env.NAME, process.env.TOKEN);
}

apps = {};

apps["event"] = "calendar";

createPersistentNotif = function(app, slug, text, callback) {
  var notifhelper;
  notifhelper = new NotificationsHelper('home');
  return notifhelper.createOrUpdatePersistent(slug, {
    text: text,
    resource: {
      app: app
    }
  }, function(err) {
    return callback(err);
  });
};

createTemporaryNotif = function(app, text, callback) {
  var notifhelper;
  notifhelper = new NotificationsHelper('home');
  return notifhelper.createTemporary({
    text: text,
    resource: {
      app: app
    }
  }, function(err) {
    return callback(err);
  });
};

extractDocType = function(rules, id) {
  var docType, rule;
  docType = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = rules.length; i < len; i++) {
      rule = rules[i];
      if (rule.id === id) {
        results.push(rule.docType);
      }
    }
    return results;
  })();
  return docType[0];
};

extractIds = function(ids) {
  var tokens;
  tokens = ids.split(":");
  return [tokens[0], tokens[1]];
};

articleBeforeDocType = function(docType) {
  var article, l;
  l = docType.charAt(0);
  if (l === 'a' || l === 'e' || l === 'i' || l === 'o') {
    return article = "an";
  } else {
    return article = "a";
  }
};

getSharingInfos = function(id, shareID, callback) {
  var options, path;
  path = "request/sharing/byShareID";
  options = {
    key: shareID,
    include_docs: true
  };
  return clientDS.post(path, options, function(err, result, body) {
    var doc, docType, ref1;
    if (err != null) {
      return callback(err);
    } else {
      doc = (ref1 = body[0]) != null ? ref1.doc : void 0;
      docType = extractDocType(doc.rules, id);
      return callback(null, doc, docType);
    }
  });
};

module.exports.handleNotification = function(event, id, callback) {
  var ref1, ref2, shareID, tokens;
  tokens = event.split(".");
  if (tokens[1] === "create") {
    return Sharing.find(id, function(err, sharing) {
      var article, docType, message, messageKey, ref1;
      if (err != null) {
        return log.error(err);
      } else if (!((ref1 = sharing.targets) != null ? ref1.length : void 0) > 0) {
        docType = sharing.rules[0].docType;
        article = articleBeforeDocType(docType);
        messageKey = 'sharing create request notification';
        message = localizationManager.t(messageKey, {
          sharerName: sharing.sharerName,
          article: article,
          docType: docType
        });
        return createTemporaryNotif(apps[docType], message, callback);
      }
    });
  } else if (tokens[2] === "update") {
    ref1 = extractIds(id), id = ref1[0], shareID = ref1[1];
    if ((id != null) && (shareID != null)) {
      return getSharingInfos(id, shareID, function(err, sharing, docType) {
        var article, message, messageKey, ref2, sharerName, slug;
        if (err != null) {
          return log.error(err);
        } else if (!((ref2 = sharing.targets) != null ? ref2.length : void 0) > 0 && (docType != null)) {
          sharerName = sharing.sharerName;
          article = articleBeforeDocType(docType);
          messageKey = 'sharing update notification';
          message = localizationManager.t(messageKey, {
            article: article,
            docType: docType,
            sharerName: sharerName
          });
          slug = "sharing_update_notification";
          return createPersistentNotif(apps[docType], slug, message, callback);
        }
      });
    }
  } else if (tokens[2] === "delete") {
    ref2 = extractIds(id), id = ref2[0], shareID = ref2[1];
    if ((id != null) && (shareID != null)) {
      return getSharingInfos(id, shareID, function(err, sharing, docType) {
        var article, message, messageKey, ref3, sharerName, slug;
        if (err != null) {
          return log.error(err);
        } else if (!((ref3 = sharing.targets) != null ? ref3.length : void 0) > 0 && (docType != null)) {
          sharerName = sharing.sharerName;
          article = articleBeforeDocType(docType);
          messageKey = 'sharing delete notification';
          message = localizationManager.t(messageKey, {
            article: article,
            docType: docType,
            sharerName: sharerName
          });
          slug = "sharing_delete_notification";
          return createPersistentNotif(apps[docType], slug, message, callback);
        }
      });
    }
  }
};
