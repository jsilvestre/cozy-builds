// Generated by CoffeeScript 1.10.0
var Client, User, apps, async, checkProxyHome, db, encryption, errors, restartApp, user,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

db = require('../helpers/db_connect_helper').db_connect();

encryption = require('../lib/encryption');

async = require('async');

Client = require("request-json").JsonClient;

User = require('../lib/user');

checkProxyHome = require('../lib/token').checkProxyHome;

errors = require('../middlewares/errors');

user = new User();

apps = [];

restartApp = function(app, cb) {
  var homeClient;
  homeClient = new Client('http://localhost:9103');
  return homeClient.post("api/applications/" + app + "/stop", {}, function(err, res) {
    if (err != null) {
      console.log(err);
    }
    return db.view('application/byslug', {
      key: app
    }, function(err, appli) {
      var descriptor, url;
      if (appli[0] != null) {
        appli = appli[0].value;
        descriptor = {
          user: appli.slug,
          name: appli.slug,
          domain: "127.0.0.1",
          repository: {
            type: "git",
            url: appli.git
          },
          scripts: {
            start: "server.coffee"
          },
          password: appli.password
        };
        url = "api/applications/" + app + "/start";
        return homeClient.post(url, {
          start: descriptor
        }, function(err, res) {
          if (err != null) {
            console.log(err);
          }
          return cb();
        });
      } else {
        return cb();
      }
    });
  });
};

module.exports.addApp = function(app) {
  if (indexOf.call(apps, app) < 0) {
    return apps.push(app);
  }
};

module.exports.checkPermissions = function(req, res, next) {
  return checkProxyHome(req.header('authorization'), function(err, isAuthorized) {
    if (!isAuthorized) {
      return next(errors.notAuthorized());
    } else {
      return next();
    }
  });
};

module.exports.initializeKeys = function(req, res, next) {
  if (req.body.password == null) {
    return next(errors.http(400, "No password field in request's body"));
  }
  return user.getUser(function(err, user) {
    var isLog;
    if (err) {
      console.log("[initializeKeys] err: " + err);
      return next(err);
    }
    if ((user.salt != null) && (user.slaveKey != null)) {
      isLog = encryption.isLog();
      return encryption.logIn(req.body.password, user, function(err) {
        if (err) {
          return next(err);
        }
        if (isLog) {
          return res.status(200).send({
            success: true
          });
        } else {
          return async.forEach(apps, function(app, cb) {
            return restartApp(app, cb);
          }, function(err) {
            if (err != null) {
              console.log(err);
            }
            return res.status(200).send({
              success: true
            });
          });
        }
      });
    } else {
      return encryption.init(req.body.password, user, function(err) {
        if (err) {
          return next(err);
        }
        return res.status(200).send({
          success: true
        });
      });
    }
  });
};

module.exports.updateKeys = function(req, res, next) {
  if (req.body.password == null) {
    return next(errors.http(400, "No password field in request's body"));
  }
  return user.getUser(function(err, user) {
    if (err) {
      console.log("[updateKeys] err: " + err);
      return next(err);
    } else {
      return encryption.update(req.body.password, user, function(err) {
        if (err) {
          return next(err);
        } else {
          return res.status(200).send({
            success: true
          });
        }
      });
    }
  });
};

module.exports.resetKeys = function(req, res, next) {
  return user.getUser(function(err, user) {
    if (err) {
      console.log("[initializeKeys] err: " + err);
      return next(err);
    }
    return encryption.reset(user, function(err) {
      if (err) {
        return next(err);
      }
      return res.status(204).send({
        success: true
      });
    });
  });
};
