// Generated by CoffeeScript 1.10.0
var Adapter, CozyInstance, EMAILREGEX, User, adapter, base32, localizationManager, utils;

utils = require('../lib/passport_utils');

Adapter = require('../lib/adapter');

User = require('../models/user');

CozyInstance = require('../models/cozyinstance');

localizationManager = require('../helpers/localization_manager');

base32 = require('thirty-two');

adapter = new Adapter();

EMAILREGEX = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

module.exports = {
  updateAccount: function(req, res, next) {
    var updateData, updatePassword;
    updateData = function(user, body, data, cb) {
      var errors;
      if (body.timezone != null) {
        data.timezone = body.timezone;
      }
      if (body.public_name != null) {
        data.public_name = body.public_name;
      }
      if (body.email != null) {
        if (body.email.length > 0) {
          if (EMAILREGEX.test(body.email)) {
            data.email = body.email;
          } else {
            errors = ["error proper email"];
            return cb(null, errors);
          }
        } else {
          errors = ["error email empty"];
          return cb(null, errors);
        }
      }
      if (body.authType !== void 0) {
        data.authType = body.authType;
        data.encryptedOtpKey = body.encryptedOtpKey;
        data.hotpCounter = body.hotpCounter;
        data.encryptedRecoveryCodes = JSON.stringify(body.recoveryCodes);
      }
      if (body.recoveryCodes != null) {
        data.encryptedRecoveryCodes = JSON.stringify(body.recoveryCodes);
      }
      if (data.timezone || data.email || data.password || data.public_name || data.encryptedRecoveryCodes || data.authType !== void 0) {
        return adapter.updateUser(user, data, function(err) {
          return cb(err, null);
        });
      } else {
        return cb(null);
      }
    };
    updatePassword = function(user, body, data, cb) {
      var errors, msg, newPassword, newPassword2, oldPassword;
      oldPassword = body.password0;
      newPassword = body.password1;
      newPassword2 = body.password2;
      errors = [];
      if (newPassword != null) {
        if (newPassword.length < 5) {
          errors.push(localizationManager.t("password too short"));
          return cb(null, errors);
        }
        if (!utils.checkPassword(oldPassword, user.password)) {
          msg = localizationManager.t("current password incorrect");
          errors.push(msg);
        }
        if (newPassword !== newPassword2) {
          errors.push(localizationManager.t("passwords don't match"));
        }
        if (!(newPassword.length > 5)) {
          errors.push(localizationManager.t("password too short"));
        }
        if (errors.length) {
          return cb(null, errors);
        }
        data.password = utils.cryptPassword(newPassword);
        return adapter.updateKeys(newPassword, cb);
      } else {
        return cb();
      }
    };
    return User.all(function(err, users) {
      var data, user;
      if (err) {
        next(err);
      }
      if (users.length === 0) {
        return res.status(400).send({
          error: localizationManager.t("no user registered")
        });
      }
      user = users[0];
      data = {};
      return updatePassword(user, req.body, data, function(libErr, userErr) {
        if (libErr) {
          return res.status(500).send({
            error: libErr
          });
        }
        if (userErr) {
          return res.status(400).send({
            error: userErr
          });
        }
        return updateData(user, req.body, data, function(libErr, userErr) {
          if (libErr) {
            return res.status(500).send({
              error: libErr
            });
          }
          if (userErr) {
            return res.status(400).send({
              error: userErr
            });
          }
          return res.send({
            success: true,
            msg: localizationManager.t('new password set')
          });
        });
      });
    });
  },
  users: function(req, res, next) {
    return User.all(function(err, users) {
      if (err) {
        return res.status(500).send({
          error: localizationManager.t("Retrieve users failed.")
        });
      } else {
        return res.send({
          rows: users
        });
      }
    });
  },
  send2FAToken: function(req, res, next) {
    return User.all(function(err, users) {
      var buffer, user;
      if (err) {
        return res.status(400).send({
          error: err
        });
      } else if (users.length === 0) {
        return res.status(400).send({
          error: localizationManager.t("no user registered")
        });
      } else {
        user = users[0];
        buffer = new Buffer(user.encryptedOtpKey, 'hex');
        return res.status(200).send({
          token: base32.encode(buffer).toString(),
          key: user.encryptedOtpKey
        });
      }
    });
  },
  instances: function(req, res, next) {
    return CozyInstance.all(function(err, instances) {
      if (err) {
        return res.status(500).send({
          error: localizationManager.t("retrieve instances failed")
        });
      } else {
        return res.send({
          rows: instances
        });
      }
    });
  },
  updateInstance: function(req, res, next) {
    var background, connectedOnce, domain, helpUrl, locale, ref;
    ref = req.body, domain = ref.domain, locale = ref.locale, helpUrl = ref.helpUrl, background = ref.background, connectedOnce = ref.connectedOnce;
    if (!((domain != null) || (locale != null) || (helpUrl != null) || (background != null) || (connectedOnce != null))) {
      return res.status(400).send({
        error: true,
        msg: localizationManager.t('No accepted parameter given')
      });
    } else {
      return CozyInstance.all(function(err, instances) {
        var data, instance, makeChange;
        if (err) {
          return next(err);
        }
        data = {
          domain: domain,
          locale: locale,
          helpUrl: helpUrl,
          background: background,
          connectedOnce: connectedOnce
        };
        if (instances.length === 0) {
          makeChange = CozyInstance.create.bind(CozyInstance);
        } else {
          instance = instances[0];
          makeChange = instance.updateAttributes.bind(instance);
        }
        return makeChange(data, function(err, instance) {
          if (err) {
            return next(err);
          }
          console.log("reinitializing");
          return localizationManager.initialize(function() {
            return res.send({
              success: true,
              msg: localizationManager.t("instance updated")
            });
          });
        });
      });
    }
  }
};
